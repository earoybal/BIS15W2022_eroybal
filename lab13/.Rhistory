knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shiny")
library(shiny)
library(devtools)
install_github("andreacirilloac/updateR")
library(updateR)
library(updateR)
library(updateR)
install_github("andreacirilloac/updateR")
updateR()
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages('tidyverse')
library(tidyverse)
library(palmerpenguins)
#install.packages('tidyverse')
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages('tidyverse')
library(tidyverse)
#install.packages("shiny")
library(shiny)
library(devtools)
#install_github("andreacirilloac/updateR")
#library(updateR)
#updateR()
#install.packages('tidyverse')
library(tidyverse)
#install.packages('tidyverse')
library(dplyr)
#install.packages('tidyverse')
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
ui <- dashboardPage(
dashboardHeader(title = 'Wolf Populations'),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = 'Select Population',
width = 3,
selectInput('x', 'Select Wolf Population', choices = unique(wolves$pop),
selected = 'AK.PEN'),
box(title = 'Plot of Population Distribution by Sex',
width = 7,
plotOutput('plot', width = '600px', height = '500px')
)
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != 'NA') %>%
filter(pop == input$x) %>%
ggplot(aes_string(x = 'sex', fill = 'sex')) +
geom_bar(color = 'black', alpha = 0.8)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Wolf Populations'),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = 'Select Population',
width = 5,
selectInput('x', 'Select Wolf Population', choices = unique(wolves$pop),
selected = 'AK.PEN'),
box(title = 'Plot of Population Distribution by Sex',
width = 7,
plotOutput('plot', width = '600px', height = '500px')
)
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != 'NA') %>%
filter(pop == input$x) %>%
ggplot(aes_string(x = 'sex', fill = 'sex')) +
geom_bar(color = 'black', alpha = 0.8)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Wolf Populations'),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = 'Select Population',
width = 5,
selectInput('x', 'Select Wolf Population', choices = unique(wolves$pop),
selected = 'AK.PEN'),
box(title = 'Plot of Population Distribution by Sex',
width = 5,
plotOutput('plot', width = '600px', height = '500px')
)
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != 'NA') %>%
filter(pop == input$x) %>%
ggplot(aes_string(x = 'sex', fill = 'sex')) +
geom_bar(color = 'black', alpha = 0.8)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
Gabon <- read.csv('data/IvindoData_DryadVersion.csv')
Gabon <- read.csv('data/gabon_data/IvindoData_DryadVersion.csv')
gabon <- read.csv('data/gabon_data/IvindoData_DryadVersion.csv')
gabon <- read.csv('data/gabon_data/IvindoData_DryadVersion.csv')
dim(gabon)
view(gabon)
colnames(gabon)
library(skimr)
library(naniar)
skim(gabon)
miss_var_summary(gabon)
glimpse(gabon)
skim(gabon)
library(ggthemes)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
colnames(gabon)
?function()
???function()
?
?ggthemes
ui <- dashboardPage(
dashboardHeader(title = 'Relative Abundance'),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
selectInput('y', 'Select Species Group', choices = c('RA_Apes', 'RA_Birds', 'RA_Elephant', 'RA_Monkeys', 'RA_Rodent', 'RA_Ungulate'),
selected = 'RA_Apes'),
sliderInput('pointsize', 'Select point size', min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("plot", width = '500px', height = '500px')
)
)
)
)
session$onSessionEnded(stopApp)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = Distance, y = input$y)) +
geom_point(size = input$pointsize) +
geom_smooth(method = lm) +
theme_clean()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = 'Distance', y = input$y)) +
geom_point(size = input$pointsize) +
geom_smooth(method = lm) +
theme_clean()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = 'Distance', y = input$y)) +
geom_point(size = input$pointsize) +
geom_smooth(method = lm) +
theme_clean() +
labs(y = 'Relative Abundance (%)',
x = 'Distance to Nearest Village (km)')
})
session$onSessionEnded(stopApp)
}
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = 'Distance', y = input$y)) +
geom_point(size = input$pointsize) +
geom_smooth(method = lm) +
theme_clean() +
labs(y = 'Relative Abundance (%)',
x = 'Distance to Nearest Village (km)')
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = 'Distance', y = input$y)) +
geom_point(size = input$pointsize) +
geom_smooth(method = lm) +
theme_clean() +
labs(y = 'Relative Abundance (%)',
x = 'Distance to Nearest Village (km)',
title = input$y)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
